{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Костыра Екатерина_ПМ1901"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задание №2. Проверка статистических гипотез "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Веберите любые данные из репозитория данных для машинного обучения (UCI Machine learning repository: http://archive.ics.uci.edu/ml/index.php) или возьмите свои данные и проверьте для них различные статистические гипотезы в соответствии со следующей схемой. Комментарии к каждому разделу обязательны. Возможно применения разных наборов данных для проверки разных гипотез."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Цель задачи состоит в том, чтобы предсказать площадь лесных пожаров в северо-восточном регионе Португалии с использованием метеорологических и других данных."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Информация об атрибутах:\n",
    "1. X - пространственная координата по оси X на карте парка Монтесиньо: от 1 до 9\n",
    "2. Y - пространственная координата по оси Y на карте парка Монтесиньо: от 2 до 9\n",
    "3. month - месяц года: от 'jan' до ' dec ' \n",
    "4. day - день недели: с понедельника по воскресенье \n",
    "5. FFMC - индекс FFMC из системы FWI: от 18,7 до 96,20\n",
    "6. DMC - индекс DMC из системы FWI: от 1,1 до 291,3\n",
    "7. DC - Индекс DC из системы FWI: от 7,9 до 860,6\n",
    "8. ISI - Индекс ISI из системы FWI: от 0,0 до 56,10\n",
    "9. temp - температура в градусах Цельсия: от 2,2 до 33,30\n",
    "10. RH - относительная влажность в%: от 15,0 до 100\n",
    "11. wind - скорость ветра в км / ч: от 0,40 до 9,40\n",
    "12. дождь - наружный дождь в мм / м2: от 0,0 до 6,4\n",
    "13. площадь - площадь выгоревшего леса (в га): от 0,00 до 1090,84"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Импортируем необходимые модули"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.chdir(\"C:/Users/79811/anaconda3/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scipy\n",
    "from scipy import stats\n",
    "import scipy.stats as sts\n",
    "from statsmodels.stats.weightstats import *\n",
    "from statsmodels.stats.descriptivestats import sign_test\n",
    "from scipy.stats import skew, kurtosis\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Посмотрим на данные:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\79811\\anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3441: FutureWarning: The error_bad_lines argument has been deprecated and will be removed in a future version.\n",
      "\n",
      "\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "C:\\Users\\41BC~1\\AppData\\Local\\Temp/ipykernel_5240/2012574996.py:3: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only\n",
      "  df = df.drop('month',1)\n",
      "C:\\Users\\41BC~1\\AppData\\Local\\Temp/ipykernel_5240/2012574996.py:4: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only\n",
      "  df = df.drop('day',1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>FFMC</th>\n",
       "      <th>DMC</th>\n",
       "      <th>DC</th>\n",
       "      <th>ISI</th>\n",
       "      <th>temp</th>\n",
       "      <th>RH</th>\n",
       "      <th>wind</th>\n",
       "      <th>rain</th>\n",
       "      <th>area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>86.2</td>\n",
       "      <td>26.2</td>\n",
       "      <td>94.3</td>\n",
       "      <td>5.1</td>\n",
       "      <td>8.2</td>\n",
       "      <td>51</td>\n",
       "      <td>6.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>90.6</td>\n",
       "      <td>35.4</td>\n",
       "      <td>669.1</td>\n",
       "      <td>6.7</td>\n",
       "      <td>18.0</td>\n",
       "      <td>33</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>90.6</td>\n",
       "      <td>43.7</td>\n",
       "      <td>686.9</td>\n",
       "      <td>6.7</td>\n",
       "      <td>14.6</td>\n",
       "      <td>33</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>91.7</td>\n",
       "      <td>33.3</td>\n",
       "      <td>77.5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>8.3</td>\n",
       "      <td>97</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>89.3</td>\n",
       "      <td>51.3</td>\n",
       "      <td>102.2</td>\n",
       "      <td>9.6</td>\n",
       "      <td>11.4</td>\n",
       "      <td>99</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>92.3</td>\n",
       "      <td>85.3</td>\n",
       "      <td>488.0</td>\n",
       "      <td>14.7</td>\n",
       "      <td>22.2</td>\n",
       "      <td>29</td>\n",
       "      <td>5.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>92.3</td>\n",
       "      <td>88.9</td>\n",
       "      <td>495.6</td>\n",
       "      <td>8.5</td>\n",
       "      <td>24.1</td>\n",
       "      <td>27</td>\n",
       "      <td>3.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>91.5</td>\n",
       "      <td>145.4</td>\n",
       "      <td>608.2</td>\n",
       "      <td>10.7</td>\n",
       "      <td>8.0</td>\n",
       "      <td>86</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>91.0</td>\n",
       "      <td>129.5</td>\n",
       "      <td>692.6</td>\n",
       "      <td>7.0</td>\n",
       "      <td>13.1</td>\n",
       "      <td>63</td>\n",
       "      <td>5.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>92.5</td>\n",
       "      <td>88.0</td>\n",
       "      <td>698.6</td>\n",
       "      <td>7.1</td>\n",
       "      <td>22.8</td>\n",
       "      <td>40</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   X  Y  FFMC    DMC     DC   ISI  temp  RH  wind  rain  area\n",
       "0  7  5  86.2   26.2   94.3   5.1   8.2  51   6.7   0.0   0.0\n",
       "1  7  4  90.6   35.4  669.1   6.7  18.0  33   0.9   0.0   0.0\n",
       "2  7  4  90.6   43.7  686.9   6.7  14.6  33   1.3   0.0   0.0\n",
       "3  8  6  91.7   33.3   77.5   9.0   8.3  97   4.0   0.2   0.0\n",
       "4  8  6  89.3   51.3  102.2   9.6  11.4  99   1.8   0.0   0.0\n",
       "5  8  6  92.3   85.3  488.0  14.7  22.2  29   5.4   0.0   0.0\n",
       "6  8  6  92.3   88.9  495.6   8.5  24.1  27   3.1   0.0   0.0\n",
       "7  8  6  91.5  145.4  608.2  10.7   8.0  86   2.2   0.0   0.0\n",
       "8  8  6  91.0  129.5  692.6   7.0  13.1  63   5.4   0.0   0.0\n",
       "9  7  5  92.5   88.0  698.6   7.1  22.8  40   4.0   0.0   0.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('forestfires.csv', error_bad_lines = False)\n",
    "# Отбрасываем колонки со строковыми значениями\n",
    "df = df.drop('month',1) \n",
    "df = df.drop('day',1) \n",
    "df = df.interpolate()\n",
    "df.head(10) # Смотрим первые 10 строк таблицы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Проверка гипотезы о нормальности распределения признаков (критерий Шапиро-Уилка, графический метод, метод на основе ассиметрии и эксцесса)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Критерий Шапиро-Уилка"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Гипотезы:\n",
    "\n",
    "H0 - распределение нормально\n",
    "\n",
    "H1 - закон распредления признака не является нормальным"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistics=0.987, p-value=0.000\n",
      "Гипотеза отклонена\n"
     ]
    }
   ],
   "source": [
    "stat, p = scipy.stats.shapiro(df['temp']) \n",
    "print('Statistics=%.3f, p-value=%.3f' % (stat, p))\n",
    "a = 0.05\n",
    "if p > a:\n",
    "    print('Гипотеза принята')\n",
    "else:\n",
    "    print('Гипотеза отклонена')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Т.к. p-value получилось низким, следовательно, мы отклоняем нулевую гипотезу. Распределение не является нормальным."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Графический метод"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot\n",
    "pyplot.hist(df['FFMC'])\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot\n",
    "pyplot.hist(df['DMC'])\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot\n",
    "pyplot.hist(df['ISI'])\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot\n",
    "pyplot.hist(df['temp'])\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot\n",
    "pyplot.hist(df['RH'])\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot\n",
    "pyplot.hist(df['wind'])\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По результатам можно сказать, что признаки FFMC, DMC, ISI, temp, RH, wind распределены ненормально"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from statsmodels.graphics.gofplots import qqplot\n",
    "qqplot(df['FFMC'], line='s')\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from statsmodels.graphics.gofplots import qqplot\n",
    "qqplot(df['DMC'], line='s')\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from statsmodels.graphics.gofplots import qqplot\n",
    "qqplot(df['rain'], line='s')\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Распределение признаков FFMC, DMC  и rain не близко к нормальному"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from statsmodels.graphics.gofplots import qqplot\n",
    "qqplot(df['temp'], line='s')\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Распределения признака temp ближе к нормальному, чем распределения предыдущих признаков"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Критерий согласия Пирсона"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistics=9.695, p-value=0.008\n",
      "Гипотеза отклонена\n"
     ]
    }
   ],
   "source": [
    "stat, p = scipy.stats.normaltest(df['temp']) \n",
    "print('Statistics=%.3f, p-value=%.3f' % (stat, p))\n",
    "a = 0.05\n",
    "if p > a:\n",
    "    print('Гипотеза принята')\n",
    "else:\n",
    "    print('Гипотеза отклонена')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В этом случае p-value также получилось низким, поэтому, мы отклоняем нулевую гипотезу. Распределение не является нормальным."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Проверка гипотезы о независимости метрических признаков (корреляция Пирсона)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.056701533062631114\n"
     ]
    }
   ],
   "source": [
    "print(abs(np.corrcoef(df['FFMC'], df['rain'])[0][1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Так как значение приближенно к 0, то в явлениях FFMC, rain отсутствует линейная корреляция (но не обязательно взаимосвязь)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3826188000494298\n"
     ]
    }
   ],
   "source": [
    "print(abs(np.corrcoef(df['FFMC'], df['DMC'])[0][1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Явления FFMC, DMC наиболее зависимы, так как значение 0,38 наиболее приближенно к 1, чем остальные"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.43153225917862015\n"
     ]
    }
   ],
   "source": [
    "print(abs(np.corrcoef(df['FFMC'], df['temp'])[0][1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Явления FFMC, temp наиболее зависимы, так как значение 0,4 наиболее приближенно к 1, чем остальные"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.469593844336031\n"
     ]
    }
   ],
   "source": [
    "print(abs(np.corrcoef(df['DMC'], df['temp'])[0][1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Явления FFMC, DMC наиболее зависимы, так как значение 0,46 наиболее приближенно к 1, чем остальные"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Проверка гипотезы о независимости ранговых признаков (корреляции Спирмена, Кендалла)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Гипотезы:\n",
    "\n",
    "H0 - признаки независимы\n",
    "\n",
    "H1 - признаки зависимы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SpearmanrResult(correlation=0.5114370779378785, pvalue=8.407497680081867e-36)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.spearmanr(df['FFMC'],df['DMC'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Так как p-value>0,05, то гипотеза H1 отвергается, следовательно, выбираем гипотезу H0 - признаки независимы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SpearmanrResult(correlation=0.0260241248916429, pvalue=0.554926025541114)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.spearmanr(df['rain'],df['temp'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Так как p-value>0,05, то гипотеза H1 отвергается, следовательно, выбираем гипотезу H0 - признаки независимы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Проверка гипотезы о независимости номинативных признаков ($\\chi^2$)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Гипотезы:\n",
    "\n",
    "H0 - признаки независимы\n",
    "\n",
    "H1 - признаки зависимы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "For each axis slice, the sum of the observed frequencies must agree with the sum of the expected frequencies to a relative tolerance of 1e-08, but the percent differences are:\n870.9374999999999",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32mC:\\Users\\41BC~1\\AppData\\Local\\Temp/ipykernel_5240/2321653965.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mstats\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mchisquare\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'temp'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'rain'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mC:\\Users\\79811\\anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py\u001b[0m in \u001b[0;36mchisquare\u001b[1;34m(f_obs, f_exp, ddof, axis)\u001b[0m\n\u001b[0;32m   6850\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   6851\u001b[0m     \"\"\"\n\u001b[1;32m-> 6852\u001b[1;33m     return power_divergence(f_obs, f_exp=f_exp, ddof=ddof, axis=axis,\n\u001b[0m\u001b[0;32m   6853\u001b[0m                             lambda_=\"pearson\")\n\u001b[0;32m   6854\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Users\\79811\\anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py\u001b[0m in \u001b[0;36mpower_divergence\u001b[1;34m(f_obs, f_exp, ddof, axis, lambda_)\u001b[0m\n\u001b[0;32m   6692\u001b[0m                    \u001b[1;34mf\"of {rtol}, but the percent differences are:\\n\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   6693\u001b[0m                    f\"{relative_diff}\")\n\u001b[1;32m-> 6694\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   6695\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   6696\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: For each axis slice, the sum of the observed frequencies must agree with the sum of the expected frequencies to a relative tolerance of 1e-08, but the percent differences are:\n870.9374999999999"
     ]
    }
   ],
   "source": [
    "stats.chisquare(df['temp'], df['rain'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Проверка гипотезы о равенстве дисперсий (критерий Флингера-Килина, критерий Ливена, F-критерий)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Гипотезы:\n",
    "\n",
    "H0 - дисперсии признаков равны\n",
    "\n",
    "H1 - дисперсии признаков не равны"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "FlignerResult(statistic=659.037796842397, pvalue=2.4187396921484702e-145)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.fligner(df['rain'], df['temp'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Поскольку p-value велико, то принимаем гипотезу H0, то есть диспресии признаков rain, temp равны."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Критерий согласия Стьюдента (одновыборочный)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Гипотезы:\n",
    "\n",
    "H0 - среднее индекса DMC из системы FWI равно 10\n",
    "\n",
    "H1 - не равно"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_1sampResult(statistic=35.81146500091882, pvalue=5.219797459781631e-142)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.ttest_1samp(df['DMC'], 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "95% confidence interval: [105.351590, 116.393091]\n"
     ]
    }
   ],
   "source": [
    "print(\"95%% confidence interval: [%f, %f]\" % zconfint(df['DMC']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Так как значение статистики больше значения 10\n",
    "\n",
    "Гипотеза H0 отвергается, следовательно выбираем гипотезу H1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Проверка гипотезы о равенстве средних значений для независимых выборок (двухвыборочный критерий Стьюдента для независимых выборок)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "H0 -  равенство математических ожиданий двух СВ\n",
    "\n",
    "H1 - не равенство математических ожиданий двух СВ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-73.7857589955888, pvalue=3.283123272577891e-277)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sts.ttest_ind(df['rain'], df['temp'], equal_var=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "95% confidence interval: [-19.369853, -18.365157]\n"
     ]
    }
   ],
   "source": [
    "cm = CompareMeans(DescrStatsW(df['rain']), DescrStatsW(df['temp']))\n",
    "print(\"95%% confidence interval: [%f, %f]\" % cm.tconfint_diff(usevar='unequal'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По результатам видно, что гипотеза Н0 не отвергается"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Проверка гипотезы о равенстве средних значений для зависимых выборок (двухвыборочный критерий Стьюдента для зависимых выборок)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-73.7857589955888, pvalue=0.0)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sts.ttest_ind(df['rain'], df['temp'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "95% confidence interval: [14.313940, 15.429193]\n"
     ]
    }
   ],
   "source": [
    "print(\"95%% confidence interval: [%f, %f]\" % DescrStatsW(df['temp'] - df['wind']).tconfint_mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По результатам видно, что гипотеза Н0 не отвергается"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Проверка гипотезы о равенстве медиан для независимых выборок (ранговый критерий Манна-Уитни, перестановочный критерий)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Критерий Манна-Уитни проверяет гипотезу о статистической однородности двух выборок.\n",
    "\n",
    "Пусть F = закон распределение первой выборки, тогда G = закон распределения второй выборки. Законы F и G должны быть непрерывны.\n",
    "\n",
    "H0: F = G\n",
    "\n",
    "H1: F < G"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MannwhitneyuResult(statistic=21.0, pvalue=2.937005766240009e-193)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sts.mannwhitneyu(df['rain'], df['temp'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По результатам видно, что гипотеза Н0 не отвергается, следовательно, законы распределения равны"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Проверка гипотезы о равенстве медиан для зависимых выборок (критерий знаковых рангов Уилкоксона, критерий знаков, перестановочный критерий)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Критерий знаковых рангов Уилкоксона\n",
    "\n",
    "𝐻0: 𝑚𝑒𝑑(𝑋1−𝑋2)=0\n",
    "\n",
    "𝐻1: 𝑚𝑒𝑑(𝑋1−𝑋2)≠0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "WilcoxonResult(statistic=0.0, pvalue=2.112544410122413e-86)"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sts.wilcoxon(df['temp'], df['rain'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По результатам видно, что гипотеза  𝐻0  не отвергается"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Критерий знаков\n",
    "\n",
    "𝐻0: 𝑃(𝑋1>𝑋2) = 0,5\n",
    "\n",
    "𝐻1: 𝑃(𝑋1>𝑋2) ≠ 0,5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M: 258, p-value: 0.000000\n"
     ]
    }
   ],
   "source": [
    "from statsmodels.stats.descriptivestats import sign_test\n",
    "from statsmodels.stats.weightstats import zconfint\n",
    "print(\"M: %d, p-value: %f\" % sign_test(df['temp'] - df['rain']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "P-value очень мало, следовательно, нулевая гипотеза является ложной. Мы вынуждены принять альтернативную гипотезу о существовании корреляции"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
