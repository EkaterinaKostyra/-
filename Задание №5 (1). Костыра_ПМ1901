{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0d7b27e6",
   "metadata": {},
   "source": [
    "## Костыра Екатерина_ПМ1901"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "satellite-piece",
   "metadata": {},
   "source": [
    "# Занятие 13. Кластерный анализ"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "demanding-description",
   "metadata": {},
   "source": [
    "Веберите любые данные для задачи кластеризации из репозитория данных для машинного обучения (UCI Machine learning repository: http://archive.ics.uci.edu/ml/index.php) или возьмите свои данные и проведите кластерный анализ с использованием метода иерархической кластеризации и метода kNN. Комментарии к каждому разделу обязательны."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32449980",
   "metadata": {},
   "source": [
    " Цель задачи состоит в том, чтобы спрогнозировать площадь выгоревших лесных пожаров в северо-восточном регионе Португалии с использованием метеорологических и других данных"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9881be83",
   "metadata": {},
   "source": [
    "#### Информация об атрибутах:\n",
    "1. X - пространственная координата по оси X на карте парка Монтесиньо: от 1 до 9\n",
    "2. Y - пространственная координата по оси Y на карте парка Монтесиньо: от 2 до 9\n",
    "3. month - месяц года: от 'jan' до ' dec '\n",
    "4. day - день недели: с\n",
    "понедельника по воскресенье 5. FFMC - индекс FFMC из системы FWI: от 18,7 до 96,20\n",
    "6. DMC - индекс DMC из системы FWI: от 1,1 до 291,3\n",
    "7. DC - Индекс DC из системы FWI: от 7,9 до 860,6\n",
    "8. ISI - Индекс ISI из системы FWI: от 0,0 до 56,10\n",
    "9. temp - температура в градусах Цельсия: от 2,2 до 33,30\n",
    "10. RH - относительная влажность в%: от 15,0 до 100\n",
    "11. wind - скорость ветра в км / ч: от 0,40 до 9,40\n",
    "12. дождь - наружный дождь в мм / м2: от 0,0 до 6,4\n",
    "13. площадь - площадь выгоревшего леса (в га): от 0,00 до 1090,84"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b771e3d",
   "metadata": {},
   "source": [
    "### Импорты"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eaf46a0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.chdir(\"C:/Users/79811/anaconda3/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f2d01319",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "matplotlib.style.use('ggplot')\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0dfc873",
   "metadata": {},
   "source": [
    "### Посмотрим на данные:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3a43520b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\41BC~1\\AppData\\Local\\Temp/ipykernel_13440/2012574996.py:3: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only\n",
      "  df = df.drop('month',1)\n",
      "C:\\Users\\41BC~1\\AppData\\Local\\Temp/ipykernel_13440/2012574996.py:4: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only\n",
      "  df = df.drop('day',1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>FFMC</th>\n",
       "      <th>DMC</th>\n",
       "      <th>DC</th>\n",
       "      <th>ISI</th>\n",
       "      <th>temp</th>\n",
       "      <th>RH</th>\n",
       "      <th>wind</th>\n",
       "      <th>rain</th>\n",
       "      <th>area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>86.2</td>\n",
       "      <td>26.2</td>\n",
       "      <td>94.3</td>\n",
       "      <td>5.1</td>\n",
       "      <td>8.2</td>\n",
       "      <td>51</td>\n",
       "      <td>6.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>90.6</td>\n",
       "      <td>35.4</td>\n",
       "      <td>669.1</td>\n",
       "      <td>6.7</td>\n",
       "      <td>18.0</td>\n",
       "      <td>33</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>90.6</td>\n",
       "      <td>43.7</td>\n",
       "      <td>686.9</td>\n",
       "      <td>6.7</td>\n",
       "      <td>14.6</td>\n",
       "      <td>33</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>91.7</td>\n",
       "      <td>33.3</td>\n",
       "      <td>77.5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>8.3</td>\n",
       "      <td>97</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>89.3</td>\n",
       "      <td>51.3</td>\n",
       "      <td>102.2</td>\n",
       "      <td>9.6</td>\n",
       "      <td>11.4</td>\n",
       "      <td>99</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>92.3</td>\n",
       "      <td>85.3</td>\n",
       "      <td>488.0</td>\n",
       "      <td>14.7</td>\n",
       "      <td>22.2</td>\n",
       "      <td>29</td>\n",
       "      <td>5.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>92.3</td>\n",
       "      <td>88.9</td>\n",
       "      <td>495.6</td>\n",
       "      <td>8.5</td>\n",
       "      <td>24.1</td>\n",
       "      <td>27</td>\n",
       "      <td>3.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>91.5</td>\n",
       "      <td>145.4</td>\n",
       "      <td>608.2</td>\n",
       "      <td>10.7</td>\n",
       "      <td>8.0</td>\n",
       "      <td>86</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>91.0</td>\n",
       "      <td>129.5</td>\n",
       "      <td>692.6</td>\n",
       "      <td>7.0</td>\n",
       "      <td>13.1</td>\n",
       "      <td>63</td>\n",
       "      <td>5.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>92.5</td>\n",
       "      <td>88.0</td>\n",
       "      <td>698.6</td>\n",
       "      <td>7.1</td>\n",
       "      <td>22.8</td>\n",
       "      <td>40</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   X  Y  FFMC    DMC     DC   ISI  temp  RH  wind  rain  area\n",
       "0  7  5  86.2   26.2   94.3   5.1   8.2  51   6.7   0.0   0.0\n",
       "1  7  4  90.6   35.4  669.1   6.7  18.0  33   0.9   0.0   0.0\n",
       "2  7  4  90.6   43.7  686.9   6.7  14.6  33   1.3   0.0   0.0\n",
       "3  8  6  91.7   33.3   77.5   9.0   8.3  97   4.0   0.2   0.0\n",
       "4  8  6  89.3   51.3  102.2   9.6  11.4  99   1.8   0.0   0.0\n",
       "5  8  6  92.3   85.3  488.0  14.7  22.2  29   5.4   0.0   0.0\n",
       "6  8  6  92.3   88.9  495.6   8.5  24.1  27   3.1   0.0   0.0\n",
       "7  8  6  91.5  145.4  608.2  10.7   8.0  86   2.2   0.0   0.0\n",
       "8  8  6  91.0  129.5  692.6   7.0  13.1  63   5.4   0.0   0.0\n",
       "9  7  5  92.5   88.0  698.6   7.1  22.8  40   4.0   0.0   0.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('forestfires.csv', error_bad_lines = False)\n",
    "# Отбрасываем колонки со строковыми значениями\n",
    "df = df.drop('month',1) \n",
    "df = df.drop('day',1) \n",
    "df = df.interpolate()\n",
    "df.head(10) # Смотрим первые 10 строк таблицы"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a756670",
   "metadata": {},
   "source": [
    "### Смотрим на описание данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8ae9febc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>FFMC</th>\n",
       "      <th>DMC</th>\n",
       "      <th>DC</th>\n",
       "      <th>ISI</th>\n",
       "      <th>temp</th>\n",
       "      <th>RH</th>\n",
       "      <th>wind</th>\n",
       "      <th>rain</th>\n",
       "      <th>area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>517.000000</td>\n",
       "      <td>517.000000</td>\n",
       "      <td>517.000000</td>\n",
       "      <td>517.000000</td>\n",
       "      <td>517.000000</td>\n",
       "      <td>517.000000</td>\n",
       "      <td>517.000000</td>\n",
       "      <td>517.000000</td>\n",
       "      <td>517.000000</td>\n",
       "      <td>517.000000</td>\n",
       "      <td>517.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.669246</td>\n",
       "      <td>4.299807</td>\n",
       "      <td>90.644681</td>\n",
       "      <td>110.872340</td>\n",
       "      <td>547.940039</td>\n",
       "      <td>9.021663</td>\n",
       "      <td>18.889168</td>\n",
       "      <td>44.288201</td>\n",
       "      <td>4.017602</td>\n",
       "      <td>0.021663</td>\n",
       "      <td>12.847292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.313778</td>\n",
       "      <td>1.229900</td>\n",
       "      <td>5.520111</td>\n",
       "      <td>64.046482</td>\n",
       "      <td>248.066192</td>\n",
       "      <td>4.559477</td>\n",
       "      <td>5.806625</td>\n",
       "      <td>16.317469</td>\n",
       "      <td>1.791653</td>\n",
       "      <td>0.295959</td>\n",
       "      <td>63.655818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>18.700000</td>\n",
       "      <td>1.100000</td>\n",
       "      <td>7.900000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.200000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>90.200000</td>\n",
       "      <td>68.600000</td>\n",
       "      <td>437.700000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>15.500000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>2.700000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>91.600000</td>\n",
       "      <td>108.300000</td>\n",
       "      <td>664.200000</td>\n",
       "      <td>8.400000</td>\n",
       "      <td>19.300000</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.520000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>92.900000</td>\n",
       "      <td>142.400000</td>\n",
       "      <td>713.900000</td>\n",
       "      <td>10.800000</td>\n",
       "      <td>22.800000</td>\n",
       "      <td>53.000000</td>\n",
       "      <td>4.900000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.570000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>96.200000</td>\n",
       "      <td>291.300000</td>\n",
       "      <td>860.600000</td>\n",
       "      <td>56.100000</td>\n",
       "      <td>33.300000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>9.400000</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>1090.840000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                X           Y        FFMC         DMC          DC         ISI  \\\n",
       "count  517.000000  517.000000  517.000000  517.000000  517.000000  517.000000   \n",
       "mean     4.669246    4.299807   90.644681  110.872340  547.940039    9.021663   \n",
       "std      2.313778    1.229900    5.520111   64.046482  248.066192    4.559477   \n",
       "min      1.000000    2.000000   18.700000    1.100000    7.900000    0.000000   \n",
       "25%      3.000000    4.000000   90.200000   68.600000  437.700000    6.500000   \n",
       "50%      4.000000    4.000000   91.600000  108.300000  664.200000    8.400000   \n",
       "75%      7.000000    5.000000   92.900000  142.400000  713.900000   10.800000   \n",
       "max      9.000000    9.000000   96.200000  291.300000  860.600000   56.100000   \n",
       "\n",
       "             temp          RH        wind        rain         area  \n",
       "count  517.000000  517.000000  517.000000  517.000000   517.000000  \n",
       "mean    18.889168   44.288201    4.017602    0.021663    12.847292  \n",
       "std      5.806625   16.317469    1.791653    0.295959    63.655818  \n",
       "min      2.200000   15.000000    0.400000    0.000000     0.000000  \n",
       "25%     15.500000   33.000000    2.700000    0.000000     0.000000  \n",
       "50%     19.300000   42.000000    4.000000    0.000000     0.520000  \n",
       "75%     22.800000   53.000000    4.900000    0.000000     6.570000  \n",
       "max     33.300000  100.000000    9.400000    6.400000  1090.840000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbe7a372",
   "metadata": {},
   "source": [
    "## Иерархическая кластеризация"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "802649ff",
   "metadata": {},
   "source": [
    "Построим дендрограмму, для того чтобы посмотреть сколько у нас имеется кластеров. Для этого воспользуемся функцией linkage, на вход которой подается два аргумента: метод вычисления расстояний между кластерами ward и метрику euclidean (default)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fc5917c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[302. , 303. ,   0. ,   2. ],\n",
       "       [ 52. ,  53. ,   0. ,   2. ],\n",
       "       [ 99. , 100. ,   0. ,   2. ],\n",
       "       [214. , 215. ,   0. ,   2. ],\n",
       "       [ 67. ,  68. ,   0.9,   2. ]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.cluster.hierarchy import dendrogram, linkage, fcluster\n",
    "\n",
    "# Объект, в котором будет хранится информация о последовательном слиянии кластеров\n",
    "link = linkage(df, 'ward', 'euclidean')\n",
    "link[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a848d57c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dn = dendrogram(link)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4316bb3c",
   "metadata": {},
   "source": [
    "Алгоритм подкрасил в дендрограмме 2 кластера.\n",
    "\n",
    "Рассмотрим какими характеристиками различаются  кластеры."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "bb526f2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Останавливаем объединение, если расстояние между кластерами превышает 2\n",
    "df['cluster'] = fcluster(link, 2, criterion='distance')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "002d3e73",
   "metadata": {},
   "source": [
    "Далее вычислим средние значения всех характеристик, сгруппировав данные по номеру кластера."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c0fdbf05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>FFMC</th>\n",
       "      <th>DMC</th>\n",
       "      <th>DC</th>\n",
       "      <th>ISI</th>\n",
       "      <th>temp</th>\n",
       "      <th>RH</th>\n",
       "      <th>wind</th>\n",
       "      <th>rain</th>\n",
       "      <th>area</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cluster</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>92.5</td>\n",
       "      <td>121.1</td>\n",
       "      <td>674.4</td>\n",
       "      <td>8.6</td>\n",
       "      <td>25.1</td>\n",
       "      <td>27.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1090.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>94.8</td>\n",
       "      <td>222.4</td>\n",
       "      <td>698.6</td>\n",
       "      <td>13.9</td>\n",
       "      <td>27.5</td>\n",
       "      <td>27.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>746.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>90.2</td>\n",
       "      <td>110.9</td>\n",
       "      <td>537.4</td>\n",
       "      <td>6.2</td>\n",
       "      <td>19.5</td>\n",
       "      <td>43.0</td>\n",
       "      <td>5.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>90.1</td>\n",
       "      <td>108.0</td>\n",
       "      <td>529.8</td>\n",
       "      <td>12.5</td>\n",
       "      <td>21.2</td>\n",
       "      <td>51.0</td>\n",
       "      <td>8.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>93.7</td>\n",
       "      <td>102.2</td>\n",
       "      <td>550.3</td>\n",
       "      <td>14.6</td>\n",
       "      <td>22.1</td>\n",
       "      <td>54.0</td>\n",
       "      <td>7.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>93.5</td>\n",
       "      <td>85.3</td>\n",
       "      <td>395.0</td>\n",
       "      <td>9.9</td>\n",
       "      <td>27.2</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>503</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>90.7</td>\n",
       "      <td>80.9</td>\n",
       "      <td>368.3</td>\n",
       "      <td>16.8</td>\n",
       "      <td>14.8</td>\n",
       "      <td>78.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>504</th>\n",
       "      <td>8.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>91.2</td>\n",
       "      <td>147.8</td>\n",
       "      <td>377.2</td>\n",
       "      <td>12.7</td>\n",
       "      <td>19.6</td>\n",
       "      <td>43.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>505</th>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>93.7</td>\n",
       "      <td>121.7</td>\n",
       "      <td>350.2</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.7</td>\n",
       "      <td>40.0</td>\n",
       "      <td>9.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>506</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>88.3</td>\n",
       "      <td>150.3</td>\n",
       "      <td>309.9</td>\n",
       "      <td>6.8</td>\n",
       "      <td>13.4</td>\n",
       "      <td>79.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37.02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>506 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           X    Y  FFMC    DMC     DC   ISI  temp    RH  wind  rain     area\n",
       "cluster                                                                     \n",
       "1        6.0  5.0  92.5  121.1  674.4   8.6  25.1  27.0   4.0   0.0  1090.84\n",
       "2        8.0  6.0  94.8  222.4  698.6  13.9  27.5  27.0   4.9   0.0   746.28\n",
       "3        7.0  4.0  90.2  110.9  537.4   6.2  19.5  43.0   5.8   0.0     0.00\n",
       "4        8.0  6.0  90.1  108.0  529.8  12.5  21.2  51.0   8.9   0.0     0.61\n",
       "5        4.0  4.0  93.7  102.2  550.3  14.6  22.1  54.0   7.6   0.0     0.79\n",
       "...      ...  ...   ...    ...    ...   ...   ...   ...   ...   ...      ...\n",
       "502      4.0  3.0  93.5   85.3  395.0   9.9  27.2  28.0   1.3   0.0     1.76\n",
       "503      1.0  2.0  90.7   80.9  368.3  16.8  14.8  78.0   8.0   0.0     0.00\n",
       "504      8.0  6.0  91.2  147.8  377.2  12.7  19.6  43.0   4.9   0.0     0.00\n",
       "505      2.0  5.0  93.7  121.7  350.2  18.0  22.7  40.0   9.4   0.0     3.19\n",
       "506      2.0  2.0  88.3  150.3  309.9   6.8  13.4  79.0   3.6   0.0    37.02\n",
       "\n",
       "[506 rows x 11 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('cluster').mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3934143e",
   "metadata": {},
   "source": [
    "Всего получилось 506 кластеров\n",
    "\n",
    "Посмотрим, сколько наблюдений попало в каждый кластер"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "88dd3cb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cluster\n",
       "1      1\n",
       "2      1\n",
       "3      1\n",
       "4      1\n",
       "5      1\n",
       "      ..\n",
       "502    1\n",
       "503    1\n",
       "504    1\n",
       "505    1\n",
       "506    1\n",
       "Length: 506, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('cluster').size()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7851e58f",
   "metadata": {},
   "source": [
    "Отсюда можно сделать вывод, что в каждый кластер попало по одному наблюдению."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ae704c8",
   "metadata": {},
   "source": [
    "Каменистая осыпь"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c5c2bc53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "       9.00000000e-01, 1.30000000e+00, 1.38621788e+00, 1.41421356e+00,\n",
       "       1.66733320e+00, 1.69000000e+00, 1.80900525e+00, 2.00249844e+00,\n",
       "       2.23606798e+00, 2.29346899e+00, 2.30651252e+00, 2.31732605e+00,\n",
       "       2.41246762e+00, 2.50000000e+00, 2.73292883e+00, 2.96647939e+00,\n",
       "       2.97672639e+00, 3.14324673e+00, 3.19374388e+00, 3.22645316e+00,\n",
       "       3.26343377e+00, 3.32000000e+00, 3.34365070e+00, 3.37786915e+00,\n",
       "       3.40098025e+00, 3.43074336e+00, 3.44480285e+00, 3.47971263e+00,\n",
       "       3.58643277e+00, 3.61109402e+00, 3.71000000e+00, 3.77258532e+00,\n",
       "       3.81968585e+00, 3.93339548e+00, 4.00124980e+00, 4.01009975e+00,\n",
       "       4.01598058e+00, 4.05689536e+00, 4.06448029e+00, 4.17391902e+00,\n",
       "       4.18000000e+00, 4.18880651e+00, 4.20119031e+00, 4.26461018e+00,\n",
       "       4.30929229e+00, 4.44369216e+00, 4.58911756e+00, 4.92848861e+00,\n",
       "       5.02534576e+00, 5.04083326e+00, 5.07354905e+00, 5.17783739e+00,\n",
       "       5.25103164e+00, 5.27470378e+00, 5.28772163e+00, 5.31978383e+00,\n",
       "       5.35956155e+00, 5.55428663e+00, 5.55442166e+00, 5.65597030e+00,\n",
       "       5.67744074e+00, 5.67838886e+00, 5.68925303e+00, 5.82546994e+00,\n",
       "       5.89349924e+00, 5.94835832e+00, 6.05805249e+00, 6.13371829e+00,\n",
       "       6.13391392e+00, 6.18376099e+00, 6.19807228e+00, 6.25912667e+00,\n",
       "       6.28525258e+00, 6.32000000e+00, 6.33403505e+00, 6.40272598e+00,\n",
       "       6.42261629e+00, 6.47765390e+00, 6.66733330e+00, 6.68321529e+00,\n",
       "       6.73579246e+00, 6.83697058e+00, 6.84385125e+00, 6.84421897e+00,\n",
       "       6.89170516e+00, 7.00785274e+00, 7.02037273e+00, 7.07850267e+00,\n",
       "       7.14269557e+00, 7.15000000e+00, 7.17913644e+00, 7.22419892e+00,\n",
       "       7.28062268e+00, 7.35934780e+00, 7.37360156e+00, 7.38444311e+00,\n",
       "       7.50475627e+00, 7.50685687e+00, 7.60944150e+00, 7.61314652e+00,\n",
       "       7.63740794e+00, 7.66561587e+00, 7.73003019e+00, 7.86885633e+00,\n",
       "       7.88511044e+00, 8.14493708e+00, 8.15718089e+00, 8.16000000e+00,\n",
       "       8.23238119e+00, 8.30240929e+00, 8.33556637e+00, 8.35384143e+00,\n",
       "       8.37555968e+00, 8.42715254e+00, 8.68755432e+00, 8.69813773e+00,\n",
       "       8.71750538e+00, 8.73441469e+00, 8.75668126e+00, 8.80572730e+00,\n",
       "       8.81603652e+00, 8.89803312e+00, 8.90168523e+00, 8.96158468e+00,\n",
       "       9.05265339e+00, 9.06214654e+00, 9.10617922e+00, 9.12414380e+00,\n",
       "       9.12834414e+00, 9.15928673e+00, 9.21731523e+00, 9.26900210e+00,\n",
       "       9.28923535e+00, 9.37789422e+00, 9.37958777e+00, 9.51314880e+00,\n",
       "       9.53240788e+00, 9.57051723e+00, 9.62785975e+00, 9.64359373e+00,\n",
       "       9.71471049e+00, 9.93327740e+00, 9.96242942e+00, 9.98949448e+00,\n",
       "       1.00015965e+01, 1.00458947e+01, 1.00844369e+01, 1.01050730e+01,\n",
       "       1.01739864e+01, 1.02137163e+01, 1.02540236e+01, 1.02542674e+01,\n",
       "       1.03140681e+01, 1.03491835e+01, 1.04499569e+01, 1.04713896e+01,\n",
       "       1.04814121e+01, 1.05283744e+01, 1.05769892e+01, 1.05781221e+01,\n",
       "       1.06399295e+01, 1.06901653e+01, 1.07704642e+01, 1.07985740e+01,\n",
       "       1.08120303e+01, 1.08486558e+01, 1.09728374e+01, 1.09820262e+01,\n",
       "       1.10670186e+01, 1.11404668e+01, 1.11560925e+01, 1.12551470e+01,\n",
       "       1.12746397e+01, 1.12915898e+01, 1.13262233e+01, 1.14651646e+01,\n",
       "       1.15047237e+01, 1.15203993e+01, 1.15312619e+01, 1.17412379e+01,\n",
       "       1.19789357e+01, 1.20891852e+01, 1.22731414e+01, 1.23478213e+01,\n",
       "       1.23550206e+01, 1.24149836e+01, 1.24576616e+01, 1.25047991e+01,\n",
       "       1.25854519e+01, 1.26055385e+01, 1.26185419e+01, 1.26515770e+01,\n",
       "       1.28206617e+01, 1.28323303e+01, 1.28876530e+01, 1.29291222e+01,\n",
       "       1.29921771e+01, 1.30026920e+01, 1.30528784e+01, 1.30972096e+01,\n",
       "       1.31341793e+01, 1.31362729e+01, 1.31426076e+01, 1.31522419e+01,\n",
       "       1.31821698e+01, 1.32980374e+01, 1.34504294e+01, 1.34527568e+01,\n",
       "       1.34685937e+01, 1.35572859e+01, 1.37019013e+01, 1.37255091e+01,\n",
       "       1.37826413e+01, 1.38063802e+01, 1.38242540e+01, 1.39136624e+01,\n",
       "       1.39857964e+01, 1.42003474e+01, 1.42870571e+01, 1.44869173e+01,\n",
       "       1.45427290e+01, 1.45975614e+01, 1.47139390e+01, 1.47156243e+01,\n",
       "       1.48189068e+01, 1.48603768e+01, 1.49523423e+01, 1.53343405e+01,\n",
       "       1.55048366e+01, 1.55802995e+01, 1.58667829e+01, 1.59722760e+01,\n",
       "       1.60190168e+01, 1.61426970e+01, 1.61973753e+01, 1.62462303e+01,\n",
       "       1.63240693e+01, 1.64841773e+01, 1.65827471e+01, 1.65831074e+01,\n",
       "       1.65868713e+01, 1.67722986e+01, 1.68251795e+01, 1.68531718e+01,\n",
       "       1.70106829e+01, 1.71669333e+01, 1.71799302e+01, 1.71841943e+01,\n",
       "       1.72118738e+01, 1.74248864e+01, 1.75462247e+01, 1.75651644e+01,\n",
       "       1.76652943e+01, 1.76764250e+01, 1.78044236e+01, 1.78369467e+01,\n",
       "       1.78643490e+01, 1.79816962e+01, 1.79873159e+01, 1.80517774e+01,\n",
       "       1.80937809e+01, 1.81132879e+01, 1.81877830e+01, 1.86668155e+01,\n",
       "       1.86921267e+01, 1.88176373e+01, 1.88642943e+01, 1.88709371e+01,\n",
       "       1.91368858e+01, 1.92278453e+01, 1.92383515e+01, 1.95183621e+01,\n",
       "       1.96800474e+01, 1.97208812e+01, 1.97694841e+01, 1.99046896e+01,\n",
       "       2.01512646e+01, 2.01573099e+01, 2.02940878e+01, 2.03247989e+01,\n",
       "       2.05098147e+01, 2.06190009e+01, 2.10870766e+01, 2.11471629e+01,\n",
       "       2.12181526e+01, 2.14478344e+01, 2.16020400e+01, 2.19009293e+01,\n",
       "       2.19183960e+01, 2.19289679e+01, 2.22885206e+01, 2.23445743e+01,\n",
       "       2.24543501e+01, 2.25736556e+01, 2.25826625e+01, 2.26809355e+01,\n",
       "       2.28708472e+01, 2.29171002e+01, 2.29178213e+01, 2.29334772e+01,\n",
       "       2.30741934e+01, 2.34669981e+01, 2.35682866e+01, 2.36025705e+01,\n",
       "       2.39094618e+01, 2.39353469e+01, 2.40626964e+01, 2.41447779e+01,\n",
       "       2.41963324e+01, 2.42217588e+01, 2.42530974e+01, 2.42621634e+01,\n",
       "       2.43569292e+01, 2.44593540e+01, 2.47439420e+01, 2.49933478e+01,\n",
       "       2.54632400e+01, 2.55956966e+01, 2.57376251e+01, 2.58830994e+01,\n",
       "       2.59981846e+01, 2.62107026e+01, 2.64658270e+01, 2.66615753e+01,\n",
       "       2.67141960e+01, 2.67830799e+01, 2.70063809e+01, 2.70243033e+01,\n",
       "       2.71154305e+01, 2.73743189e+01, 2.74290313e+01, 2.74577785e+01,\n",
       "       2.75899867e+01, 2.77475898e+01, 2.78000246e+01, 2.78834879e+01,\n",
       "       2.79947352e+01, 2.81143977e+01, 2.81639291e+01, 2.83999700e+01,\n",
       "       2.84364010e+01, 2.84490813e+01, 2.90489652e+01, 2.90590778e+01,\n",
       "       2.95210339e+01, 2.99778585e+01, 3.00397725e+01, 3.02755281e+01,\n",
       "       3.03252639e+01, 3.04427134e+01, 3.05097370e+01, 3.08711235e+01,\n",
       "       3.10597926e+01, 3.10976972e+01, 3.11773555e+01, 3.13968682e+01,\n",
       "       3.15471178e+01, 3.19226317e+01, 3.19296222e+01, 3.24192713e+01,\n",
       "       3.26659975e+01, 3.37801470e+01, 3.45532830e+01, 3.46189085e+01,\n",
       "       3.47924710e+01, 3.48303890e+01, 3.49419242e+01, 3.50075116e+01,\n",
       "       3.56819494e+01, 3.56967263e+01, 3.59721637e+01, 3.62866741e+01,\n",
       "       3.63188657e+01, 3.64302987e+01, 3.67862462e+01, 3.70401809e+01,\n",
       "       3.75373241e+01, 3.75767437e+01, 3.76524900e+01, 3.89011783e+01,\n",
       "       3.90086291e+01, 3.90633403e+01, 3.91227057e+01, 3.98134358e+01,\n",
       "       3.98394769e+01, 4.08630713e+01, 4.27313814e+01, 4.28057797e+01,\n",
       "       4.32235638e+01, 4.34024422e+01, 4.36410710e+01, 4.39613861e+01,\n",
       "       4.39910297e+01, 4.41970077e+01, 4.42331107e+01, 4.43337323e+01,\n",
       "       4.47238907e+01, 4.51193262e+01, 4.54479210e+01, 4.56133186e+01,\n",
       "       4.61696058e+01, 4.62581723e+01, 4.73805106e+01, 4.82362416e+01,\n",
       "       5.01563338e+01, 5.06943553e+01, 5.17303552e+01, 5.17604888e+01,\n",
       "       5.22367144e+01, 5.26015103e+01, 5.29171308e+01, 5.31334196e+01,\n",
       "       5.33316842e+01, 5.37924096e+01, 5.42315322e+01, 5.45374025e+01,\n",
       "       5.50725745e+01, 5.60057690e+01, 5.75959801e+01, 5.77731464e+01,\n",
       "       5.86690719e+01, 5.90658108e+01, 5.93437040e+01, 5.98352738e+01,\n",
       "       6.05620603e+01, 6.15495605e+01, 6.16776819e+01, 6.40781864e+01,\n",
       "       6.47937029e+01, 6.48061047e+01, 6.59264399e+01, 6.64945664e+01,\n",
       "       6.81908430e+01, 6.83689013e+01, 6.88426119e+01, 6.99484360e+01,\n",
       "       7.00245124e+01, 7.11431083e+01, 7.24157134e+01, 7.24839651e+01,\n",
       "       7.26601735e+01, 7.72912558e+01, 7.99152222e+01, 8.17645616e+01,\n",
       "       8.28486023e+01, 8.29619409e+01, 8.35161925e+01, 8.35464514e+01,\n",
       "       8.38774264e+01, 8.41584778e+01, 8.48397653e+01, 8.59684150e+01,\n",
       "       8.71448535e+01, 8.72779634e+01, 8.93059395e+01, 9.24180436e+01,\n",
       "       9.40468773e+01, 9.58948686e+01, 9.76657385e+01, 9.87782346e+01,\n",
       "       9.93299229e+01, 9.94048368e+01, 1.03006524e+02, 1.03806610e+02,\n",
       "       1.05661348e+02, 1.05671203e+02, 1.07617323e+02, 1.13176980e+02,\n",
       "       1.16163716e+02, 1.16414573e+02, 1.17515132e+02, 1.21063295e+02,\n",
       "       1.21620767e+02, 1.21986071e+02, 1.22167968e+02, 1.22841950e+02,\n",
       "       1.24594051e+02, 1.38183717e+02, 1.40872094e+02, 1.53216721e+02,\n",
       "       1.55305397e+02, 1.59874964e+02, 1.62193230e+02, 1.63921534e+02,\n",
       "       1.66040400e+02, 1.66169861e+02, 1.70036616e+02, 1.86407319e+02,\n",
       "       1.98620838e+02, 2.22115272e+02, 2.38654562e+02, 2.39624274e+02,\n",
       "       2.50180754e+02, 2.59791371e+02, 2.75637739e+02, 2.78246801e+02,\n",
       "       3.36730424e+02, 3.48147529e+02, 3.60019268e+02, 3.61392740e+02,\n",
       "       3.95303889e+02, 4.39125698e+02, 4.59168627e+02, 7.06251567e+02,\n",
       "       8.21462590e+02, 8.24850566e+02, 8.67804180e+02, 1.15701213e+03,\n",
       "       1.28376009e+03, 1.81311487e+03, 2.76334185e+03, 7.29991929e+03])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist = link[:, 2]\n",
    "dist"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16e18de0",
   "metadata": {},
   "source": [
    "Получили расстояние между парами слитых кластеров.\n",
    "\n",
    "Поэтому можем построить график зависимости расстояний между кластерами от шага слияния (обратного), и посмотреть, начиная с какого момента это расстояние перестанет значительно меняться."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ce1ed226",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(22, 2.6, '4 clusters')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dist_rev = dist[::-1]\n",
    "idxs = range(1, len(dist) + 1)\n",
    "plt.plot(idxs, dist_rev, marker='o')\n",
    "plt.title('Distance between merged clusters')\n",
    "plt.xlabel('Step')\n",
    "plt.ylabel('Distance')\n",
    "plt.axhline(3, c='k', linestyle='dashed')\n",
    "plt.axhline(2.52, c='k', linestyle='dashed')\n",
    "plt.text(25, 3.1, '3 clusters')\n",
    "plt.text(22, 2.6, '4 clusters')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "902ecc9e",
   "metadata": {},
   "source": [
    "Из графика видно, что один элемент сильно дальше остальных. Но т.к. этот способ немасштабируем для больших данных, то можно включить не все слияния, а только несколько последних."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "impossible-enhancement",
   "metadata": {},
   "source": [
    "## Кластеризация методом k-means (k-средних)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4742a10",
   "metadata": {},
   "source": [
    "Для кластеризации методом k-means необходимо задать k наперёд. Попробуем задать k = 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "839c52f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "# инициализация модели\n",
    "model = KMeans(n_clusters=2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6114f5c3",
   "metadata": {},
   "source": [
    "Подгонка модели по данным из df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1b6ee410",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KMeans(n_clusters=2, random_state=42)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34b2f939",
   "metadata": {},
   "source": [
    "Результат кластеризации на данных df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5c50f048",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0,\n",
       "       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,\n",
       "       0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0,\n",
       "       0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,\n",
       "       1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1,\n",
       "       1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
       "       1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0,\n",
       "       0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1,\n",
       "       0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n",
       "       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1,\n",
       "       0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
       "       0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.labels_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "483c0028",
   "metadata": {},
   "source": [
    "Координаты центров кластеров"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1559da3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4.50136240e+00, 4.20163488e+00, 9.17160763e+01, 1.35823706e+02,\n",
       "        6.90874659e+02, 9.70081744e+00, 2.05817439e+01, 4.39455041e+01,\n",
       "        3.80245232e+00, 2.94277929e-02, 1.53858856e+01, 1.79019074e+02],\n",
       "       [5.08000000e+00, 4.54000000e+00, 8.80233333e+01, 4.98246667e+01,\n",
       "        1.98226667e+02, 7.36000000e+00, 1.47480000e+01, 4.51266667e+01,\n",
       "        4.54400000e+00, 2.66666667e-03, 6.63620000e+00, 4.25653333e+02]])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.cluster_centers_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e82a78b",
   "metadata": {},
   "source": [
    "Теперь узнаем сколько кластеров необходимо взять для рассмотрения и для этого построим график каменистой осыпи."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "53cebcfb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "K = range(1, 10)\n",
    "models = [KMeans(n_clusters=k, random_state=42).fit(df) for k in K]\n",
    "dist = [model.inertia_ for model in models]\n",
    "\n",
    "# Plot the elbow\n",
    "plt.plot(K, dist, marker='o')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('Sum of distances')\n",
    "plt.title('The Elbow Method showing the optimal k')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6ba1033",
   "metadata": {},
   "source": [
    "Кластеризацию можно считать условно хорошей.\n",
    "\n",
    "Допустим, что 2 кластера - оптимальный выбор. Далее посмотрим на список наблюдений, который составляет данные кластеры, и рассмотрим, чем они отличаются друг от друга."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "281a5791",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "      <th>FFMC</th>\n",
       "      <th>DMC</th>\n",
       "      <th>DC</th>\n",
       "      <th>ISI</th>\n",
       "      <th>temp</th>\n",
       "      <th>RH</th>\n",
       "      <th>wind</th>\n",
       "      <th>rain</th>\n",
       "      <th>area</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cluster</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.570707</td>\n",
       "      <td>4.234848</td>\n",
       "      <td>91.782828</td>\n",
       "      <td>133.328535</td>\n",
       "      <td>674.087374</td>\n",
       "      <td>9.766162</td>\n",
       "      <td>20.665657</td>\n",
       "      <td>43.825758</td>\n",
       "      <td>3.811364</td>\n",
       "      <td>0.027778</td>\n",
       "      <td>14.907828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.991736</td>\n",
       "      <td>4.512397</td>\n",
       "      <td>86.919835</td>\n",
       "      <td>37.379339</td>\n",
       "      <td>135.094215</td>\n",
       "      <td>6.585124</td>\n",
       "      <td>13.075207</td>\n",
       "      <td>45.801653</td>\n",
       "      <td>4.692562</td>\n",
       "      <td>0.001653</td>\n",
       "      <td>6.103719</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                X         Y       FFMC         DMC          DC       ISI  \\\n",
       "cluster                                                                    \n",
       "0        4.570707  4.234848  91.782828  133.328535  674.087374  9.766162   \n",
       "1        4.991736  4.512397  86.919835   37.379339  135.094215  6.585124   \n",
       "\n",
       "              temp         RH      wind      rain       area  \n",
       "cluster                                                       \n",
       "0        20.665657  43.825758  3.811364  0.027778  14.907828  \n",
       "1        13.075207  45.801653  4.692562  0.001653   6.103719  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = KMeans(n_clusters=2, random_state=42)\n",
    "model.fit(df)\n",
    "df['cluster'] = model.labels_\n",
    "df.groupby('cluster').mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e743529a",
   "metadata": {},
   "source": [
    "Посчитаем средние значения факторов для каждого кластера, то есть количество элементов в каждом из двух кластеров."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b4e80aaa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cluster\n",
       "0    396\n",
       "1    121\n",
       "dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('cluster').size()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58d27d58",
   "metadata": {},
   "source": [
    "Среднее значение фактора для первого кластера равно 396, для второго - 121."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
